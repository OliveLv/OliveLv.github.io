{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":0},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":0},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":0},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":0},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":0},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":0},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":0},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":0},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":0},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":0},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":0},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":0},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":0},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":0},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":0},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":0},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":0},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":0},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":0},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":0},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0}],"Cache":[{"_id":"source/_posts/46-Permutations.md","shasum":"3a01abb2407dcfd3644c8723edfcfcc6f4542daa","modified":1458129001986},{"_id":"source/_posts/145-Binary-Tree-Postorder-Traversal.md","shasum":"eb57d6da5d5d2129a801c47d497c30af19f8a8a5","modified":1458135345622},{"_id":"source/_posts/153-Find-Minimum-in-Rotated-Sorted-Array.md","shasum":"49c07bb5eed30cc1acd20a10e372d33d8d98801f","modified":1458124872156},{"_id":"source/_posts/62. Unique Paths.md","shasum":"b1e21736f15c6513bbe88c7aeaf2d11d0b4ac2f5","modified":1458124872157},{"_id":"source/_posts/98-Gary-Code.md","shasum":"062703ad7a14c04ac67a0964e5a054a92cfe5974","modified":1458124872161},{"_id":"source/_posts/List之ArrayList源码分析.md","shasum":"edcdbe59727447b7e71d6844928f80421462141c","modified":1458124872162},{"_id":"source/_posts/hello-world.md","shasum":"1b38afaa10faed1747ef089c929972e3d7d26e46","modified":1458124872163},{"_id":"themes/yilia/README.md","shasum":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1444128783664},{"_id":"themes/yilia/_config.yml","shasum":"5b899ce3e0541c33c476b24dcb5b40987a2bb7ac","modified":1458369996101},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","shasum":"3709af4e8f7e1196dbd1f9dea62fa440d4b47836","modified":1444128783666},{"_id":"themes/yilia/layout/_partial/footer.ejs","shasum":"75de28fd8d77e08892c6e5bca785e124a1ada0ac","modified":1458368476220},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","shasum":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1444128783669},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","shasum":"5b29a383418cfdcf8d5c5719b4fc4608aaba6fe7","modified":1444128783667},{"_id":"themes/yilia/layout/_partial/archive.ejs","shasum":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1444128783668},{"_id":"themes/yilia/layout/_partial/head.ejs","shasum":"a811c37dc5450cb645265884954ab3598ffcb308","modified":1444128783669},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","shasum":"7be03a92dabeb2f94bf0e731d12a1c1146d736dd","modified":1444128783670},{"_id":"themes/yilia/layout/_partial/article.ejs","shasum":"fd269b6d1b22fb201b3349c72bc785c82514b3be","modified":1444128783668},{"_id":"themes/yilia/layout/_partial/post/category.ejs","shasum":"27fab3e6ccc41c075dc4c5ba3ca9e7f3b6247945","modified":1444128783671},{"_id":"themes/yilia/layout/_partial/post/date.ejs","shasum":"06d8914b5aef73b5ec2cabb0105e275ff821b321","modified":1444128783671},{"_id":"themes/yilia/layout/_partial/left-col.ejs","shasum":"a01a4f9d738236a5340926e4c33cd333e34d548a","modified":1444128783670},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","shasum":"998e065e0ea49852281684fa6e2629780053abec","modified":1444128783671},{"_id":"themes/yilia/layout/_partial/post/share.ejs","shasum":"e032a0417c931de2a626cd06c797206a823014a6","modified":1444128783673},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","shasum":"acf1b9d79ccec172881f9f0080e96667f4178885","modified":1444128783673},{"_id":"themes/yilia/layout/_partial/post/title.ejs","shasum":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1444128783674},{"_id":"themes/yilia/layout/_partial/header.ejs","shasum":"b69855e07b65117769adc515cb64b803932068c9","modified":1444128783669},{"_id":"themes/yilia/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1444128783674},{"_id":"themes/yilia/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1444128783674},{"_id":"themes/yilia/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1444128783675},{"_id":"themes/yilia/layout/layout.ejs","shasum":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1444128783675},{"_id":"themes/yilia/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1444128783676},{"_id":"themes/yilia/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1444128783676},{"_id":"themes/yilia/package.json","shasum":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1444128783677},{"_id":"themes/yilia/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1444128783676},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","shasum":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1444128783672},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","shasum":"c115c282eebfb6b18612d2d8733272c270b03066","modified":1444128783672},{"_id":"themes/yilia/source/css/_partial/footer.styl","shasum":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1444128783680},{"_id":"themes/yilia/source/css/_extend.styl","shasum":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1444128783679},{"_id":"themes/yilia/source/css/_partial/archive.styl","shasum":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1444128783679},{"_id":"themes/yilia/source/css/_partial/article.styl","shasum":"505b414537e10ca9a2bbfe58ad602e9a6e392790","modified":1458368476242},{"_id":"themes/yilia/source/css/_partial/header.styl","shasum":"67e59feb18eee6026717cb440d86ab9551782628","modified":1444128783681},{"_id":"themes/yilia/source/css/_partial/highlight.styl","shasum":"8987b455f11a141d8507d722ad48241add1b0bf0","modified":1458368476244},{"_id":"themes/yilia/source/css/_partial/instagram.styl","shasum":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1444128783681},{"_id":"themes/yilia/source/css/_partial/main.styl","shasum":"4268f759920106a576c6037264076b36018ff73b","modified":1458368476252},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","shasum":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1444128783682},{"_id":"themes/yilia/source/css/_partial/share.styl","shasum":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1444128783683},{"_id":"themes/yilia/source/css/_partial/page.styl","shasum":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1444128783683},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","shasum":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1444128783684},{"_id":"themes/yilia/source/css/_partial/mobile.styl","shasum":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1444128783683},{"_id":"themes/yilia/source/css/_partial/scroll.styl","shasum":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1444128783683},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","shasum":"af0115de5c6455f899a2e09225b50224982c039d","modified":1444128783684},{"_id":"themes/yilia/source/css/_util/grid.styl","shasum":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1444128783685},{"_id":"themes/yilia/source/css/_util/mixin.styl","shasum":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1444128783685},{"_id":"themes/yilia/source/css/_variables.styl","shasum":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1444128783686},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1444128783687},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1444128783689},{"_id":"themes/yilia/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1444128783691},{"_id":"themes/yilia/source/css/style.styl","shasum":"7bc55e29d918bda94a65f555c5c18c94d84ca6e8","modified":1458368476263},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","shasum":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1444128783690},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1444128783690},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1444128783692},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1444128783692},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1444128783693},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1444128783694},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1444128783694},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1444128783694},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"6394c48092085788a8c0ef72670b0652006231a1","modified":1444128783695},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1444128783696},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1444128783696},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1444128783696},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","shasum":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1444128783697},{"_id":"themes/yilia/source/img/coderwall.png","shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1444128783700},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","shasum":"004bb0812414554ab48067792f09e978603253b6","modified":1444128783698},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","shasum":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1444128783699},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1444128783697},{"_id":"themes/yilia/source/img/delicious.png","shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1444128783700},{"_id":"themes/yilia/source/img/douban.png","shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1444128783700},{"_id":"themes/yilia/source/img/facebook.png","shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1444128783701},{"_id":"themes/yilia/source/img/github.png","shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1444128783701},{"_id":"themes/yilia/source/img/google.png","shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1444128783702},{"_id":"themes/yilia/source/img/img-err.png","shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1444128783702},{"_id":"themes/yilia/source/img/pinboard.png","shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1444128783703},{"_id":"themes/yilia/source/img/img-loading.png","shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1444128783702},{"_id":"themes/yilia/source/img/linkedin.png","shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1444128783703},{"_id":"themes/yilia/source/img/mail.png","shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1444128783703},{"_id":"themes/yilia/source/img/stackoverflow.png","shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1444128783705},{"_id":"themes/yilia/source/img/pinterest.png","shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1444128783704},{"_id":"themes/yilia/source/img/rss.png","shasum":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1444128783704},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1444128783704},{"_id":"themes/yilia/source/img/twitter.png","shasum":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1444128783705},{"_id":"themes/yilia/source/img/weibo.png","shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1444128783706},{"_id":"themes/yilia/source/img/zhihu.png","shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1444128783706},{"_id":"themes/yilia/source/js/instagram.js","shasum":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1444128783707},{"_id":"themes/yilia/source/js/jquery.lazyload.js","shasum":"9c34c37b4dca82386648d364da913153d1db902e","modified":1444128783707},{"_id":"themes/yilia/source/js/main.js","shasum":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1444128783708},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1444128783688},{"_id":"themes/yilia/source/js/mobile.js","shasum":"387c047e661f04fbb5f5bfc4b2db617023e836ce","modified":1444128783709},{"_id":"themes/yilia/source/js/pc.js","shasum":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1444128783709}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"145. Binary Tree Postorder Traversal","date":"2016-03-16T13:35:21.000Z","_content":"Given a binary tree, return the postorder traversal of its nodes' values.\n\nFor example:\nGiven binary tree {1,#,2,3},\n   1\n    \\\n     2\n    /\n   3\nreturn [3,2,1].\n\n解题思路：\n方法一：递归方法。。。\n\n```java\nclass Solution {\npublic:\n\t// recursive\n    vector<int> postorderTraversal(TreeNode* root) {\n         vector<int>res;\n         postorder(root,res);\n         return res;\n    }\n    void postorder(TreeNode* root,vector<int>&res){\n        if(root==NULL)return ;\n        if(root->left!=NULL)postorder(root->left,res);\n        if(root->right!=NULL)postorder(root->right,res);\n        res.push_back(root->val);\n    }\n};\n```\n方法二：非递归方法\n参考：\nhttp://zhidao.baidu.com/link?url=hi29Y_FNWekIU9L4YJV0hqzuzB6YXtQdH-7BJvfUUvzB731gxdH1_zMKfAZkBUo4JlhupBobBuq_usGqy-nrm_J9Fc79KE6i0WJ7tvb6sk3\n每次将节点的左结点放入栈中，对于最左节点，若存在右节点，则将其放入栈中，修改最左节点的右节点为空，同时将该右节点的左节点依次放入栈中。若找到一个最左节点，没有右节点，则该节点被访问。。。\n```java\n// iterator\n// reference:http://zhidao.baidu.com/link?url=hi29Y_FNWekIU9L4YJV0hqzuzB6YXtQdH-7BJvfUUvzB731gxdH1_zMKfAZkBUo4JlhupBobBuq_usGqy-nrm_J9Fc79KE6i0WJ7tvb6sk3\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode* root) {\n         vector<int>res;\n         if(root==NULL)return res;\n         stack<TreeNode*>s;\n         TreeNode*p=root;\n         while(p){\n            s.push(p);\n            p=p->left;\n\t\t\t}\n         while(!s.empty()){\n             p=s.top();\n             //cout<<p->val<<endl;\n             if(p->right){\n                 //cout<<p->right->val<<endl;\n                 s.push(p->right);\n                 TreeNode*q=p->right;\n                 p->right=NULL;\n                 p=q;\n                 while(p->left){\n\t\t\t\t\t//cout<<p->left->val<<\"  fei\"<<endl;\n\t\t\t\t\ts.push(p->left);\n\t\t\t\t\tp=p->left;\n\t\t\t\t}\n             }else{\n                 s.pop();\n                 res.push_back(p->val);\n\t\t\t\t}\n             }\n         return res;\n    }\n\n};\n```\n\n方法三：类似前序遍历，不过将访问顺序改为根结点，右节点，左节点的顺序，栈可以实现。该过程是后序遍历的逆序。\n```java\n// another iterator\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode* root) {\n         vector<int>res;\n         if(root==NULL)return res;\n         stack<TreeNode*>s;\n         s.push(root);\n         while(!s.empty()){\n             TreeNode*p=s.top();\n             s.pop();\n             res.push_back(p->val);\n             if(p->left)s.push(p->left);\n             if(p->right)s.push(p->right);\n         }\n         std::reverse(res.begin(),res.end());\n         return res;\n    }\n\n};\n```\n","source":"_posts/145-Binary-Tree-Postorder-Traversal.md","raw":"title: 145. Binary Tree Postorder Traversal\ndate: 2016-03-16 21:35:21\ntags:\n- leetcode\n---\nGiven a binary tree, return the postorder traversal of its nodes' values.\n\nFor example:\nGiven binary tree {1,#,2,3},\n   1\n    \\\n     2\n    /\n   3\nreturn [3,2,1].\n\n解题思路：\n方法一：递归方法。。。\n\n```java\nclass Solution {\npublic:\n\t// recursive\n    vector<int> postorderTraversal(TreeNode* root) {\n         vector<int>res;\n         postorder(root,res);\n         return res;\n    }\n    void postorder(TreeNode* root,vector<int>&res){\n        if(root==NULL)return ;\n        if(root->left!=NULL)postorder(root->left,res);\n        if(root->right!=NULL)postorder(root->right,res);\n        res.push_back(root->val);\n    }\n};\n```\n方法二：非递归方法\n参考：\nhttp://zhidao.baidu.com/link?url=hi29Y_FNWekIU9L4YJV0hqzuzB6YXtQdH-7BJvfUUvzB731gxdH1_zMKfAZkBUo4JlhupBobBuq_usGqy-nrm_J9Fc79KE6i0WJ7tvb6sk3\n每次将节点的左结点放入栈中，对于最左节点，若存在右节点，则将其放入栈中，修改最左节点的右节点为空，同时将该右节点的左节点依次放入栈中。若找到一个最左节点，没有右节点，则该节点被访问。。。\n```java\n// iterator\n// reference:http://zhidao.baidu.com/link?url=hi29Y_FNWekIU9L4YJV0hqzuzB6YXtQdH-7BJvfUUvzB731gxdH1_zMKfAZkBUo4JlhupBobBuq_usGqy-nrm_J9Fc79KE6i0WJ7tvb6sk3\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode* root) {\n         vector<int>res;\n         if(root==NULL)return res;\n         stack<TreeNode*>s;\n         TreeNode*p=root;\n         while(p){\n            s.push(p);\n            p=p->left;\n\t\t\t}\n         while(!s.empty()){\n             p=s.top();\n             //cout<<p->val<<endl;\n             if(p->right){\n                 //cout<<p->right->val<<endl;\n                 s.push(p->right);\n                 TreeNode*q=p->right;\n                 p->right=NULL;\n                 p=q;\n                 while(p->left){\n\t\t\t\t\t//cout<<p->left->val<<\"  fei\"<<endl;\n\t\t\t\t\ts.push(p->left);\n\t\t\t\t\tp=p->left;\n\t\t\t\t}\n             }else{\n                 s.pop();\n                 res.push_back(p->val);\n\t\t\t\t}\n             }\n         return res;\n    }\n\n};\n```\n\n方法三：类似前序遍历，不过将访问顺序改为根结点，右节点，左节点的顺序，栈可以实现。该过程是后序遍历的逆序。\n```java\n// another iterator\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode* root) {\n         vector<int>res;\n         if(root==NULL)return res;\n         stack<TreeNode*>s;\n         s.push(root);\n         while(!s.empty()){\n             TreeNode*p=s.top();\n             s.pop();\n             res.push_back(p->val);\n             if(p->left)s.push(p->left);\n             if(p->right)s.push(p->right);\n         }\n         std::reverse(res.begin(),res.end());\n         return res;\n    }\n\n};\n```\n","slug":"145-Binary-Tree-Postorder-Traversal","published":1,"updated":"2016-03-16T13:35:45.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilykuy9f0000i4fq92gntci4"},{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"tags: \n\t- 主题 \n\t- hexo\ntitle: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-03-16T10:41:12.163Z","updated":"2016-03-16T10:41:12.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilykuy9w0003i4fqblkslv78"},{"title":"List之ArrayList源码分析","date":"2016-03-16T08:40:13.000Z","_content":"ArrayList内部使用一个Object[]数组来保存元素。**源码版本为JDK1.7.0_75**.\n```java\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable,java.io.Serializable\n```\n从ArrayList<E>可以看出它是支持泛型的，它继承了AbstractList，该类提供了List接口的默认实现；List接口定义了list必须实现的方法；RandomAccess是一个标记接口，接口内没有定义任何内容；实现了Cloneable接口的类，可以调用Object.clone方法返回该对象的浅拷贝；实现java.io.Serializable接口可以启用序列化功能，这个也是一个标记接口，接口内也没有定义任何内容，仅用于标识可序列化的语义。\n\n**成员变量**\n```java\n    private static final long serialVersionUID = 8683452581122892189L;\n \n    /**\n     * 默认初始长度\n     * Default initial capacity.\n     */\n    private static final int DEFAULT_CAPACITY = 10;\n \n    /**\n     * 共享的空数组，用于无参构造实例\n     * Shared empty array instance used for empty instances.\n     */\n    private static final Object[] EMPTY_ELEMENTDATA = {};\n \n    /**\n     * 存储arraylist元素的buffer。arraylist的容量为该数组的长度。当arraylist为空且\n     *   elementData==EMPTY_ELEMENTDATA时，添加第一个元素时，arraylist的长度会扩展到\n     *   DEFAULT_CAPACITY。\n     * The array buffer into which the elements of the ArrayList are stored.\n     * The capacity of the ArrayList is the length of this array buffer. Any\n     * empty ArrayList with elementData == EMPTY_ELEMENTDATA will be expanded to\n     * DEFAULT_CAPACITY when the first element is added.\n     */\n    private transient Object[] elementData;\n \n    /**\n     * arraylist的长度（包含的元素数目）\n     * The size of the ArrayList (the number of elements it contains).\n     *\n     * @serial\n     */\n    private int size;\n```\nelementData数组存储ArrayList中的元素，size为数组长度。\n其中，transient关键字用来表示一个域不是该对象串行化（序列化）的一部分。当一个对象被串行化（序列化）时，transient型变量不包括在串行化（序列化）表示中。通俗地讲，如果用transient修饰一个变量，当对象被存储时，该变量的值不需要维持，不需要为给变量分配内存。\n1. transient的作用及使用方法\n      我们都知道一个对象只要实现了Serilizable接口，这个对象就可以被序列化，java的这种序列化模式为开发者提供了很多便利，我们可以不必关系具体序列化的过程，只要这个类实现了Serilizable接口，这个类的所有属性和方法都会自动序列化。\n      然而在实际开发过程中，我们常常会遇到这样的问题，这个类的有些属性需要序列化，而其他属性不需要被序列化，打个比方，如果一个用户有一些敏感信息（如密码，银行卡号等），为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。\n      总之，java 的transient关键字为我们提供了便利，你只需要实现Serilizable接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。\n\n来自 <http://www.cnblogs.com/lanxuezaipiao/p/3369962.html> \n\n**构造函数**\n```java\n    /**\n     * 构造给定数组大小的空数组\n     * Constructs an empty list with the specified initial capacity.\n     *\n     * @param  initialCapacity  the initial capacity of the list\n     * @throws IllegalArgumentException if the specified initial capacity\n     *         is negative\n     */\n    public ArrayList(int initialCapacity) {\n        super();\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                               initialCapacity);\n        this.elementData = new Object[initialCapacity];\n    }\n \n    /**\n     * 构造未指定数组大小的空数组，此时elementData=EMPTY_ELEMENTDATA\n     * Constructs an empty list with an initial capacity of ten.\n     */\n    public ArrayList() {\n        super();\n        this.elementData = EMPTY_ELEMENTDATA;\n    }\n \n    /**\n     * 构造指定数组大小及元素的数组\n     * Constructs a list containing the elements of the specified\n     * collection, in the order they are returned by the collection's\n     * iterator.\n     *\n     * @param c the collection whose elements are to be placed into this list\n     * @throws NullPointerException if the specified collection is null\n     */\n    public ArrayList(Collection<? extends E> c) {\n        elementData = c.toArray();\n        size = elementData.length;\n        // c.toArray might (incorrectly) not return Object[] (see 6260652)\n        if (elementData.getClass() != Object[].class)\n            elementData = Arrays.copyOf(elementData, size, Object[].class);\n    }\n```\n**方法：**\ntrimToSize中的modCount为父类AbstractList的成员，“The number of times this list has been <i>structurally modified</i>”记录list结构修改次数。\n```java\n    /**\n     * 将arraylist的容量修剪到数组的长度。应用该方法可以减少arraylist实例的内存。\n     * Trims the capacity of this <tt>ArrayList</tt> instance to be the\n     * list's current size.  An application can use this operation to minimize\n     * the storage of an <tt>ArrayList</tt> instance.\n     */\n    public void trimToSize() {\n        modCount++;\n        if (size < elementData.length) {\n            elementData = Arrays.copyOf(elementData, size);\n        }\n    }\n```\n\n扩充arraylist的容量，至少扩充到原来的1.5倍\n```java\n    /**\n     * 扩充arraylist的容量\n     * Increases the capacity of this <tt>ArrayList</tt> instance, if\n     * necessary, to ensure that it can hold at least the number of elements\n     * specified by the minimum capacity argument.\n     *\n     * @param   minCapacity   the desired minimum capacity\n     */\n    public void ensureCapacity(int minCapacity) {\n        int minExpand = (elementData != EMPTY_ELEMENTDATA)\n            // any size if real element table\n            ? 0\n            // larger than default for empty table. It's already supposed to be\n            // at default size.\n            : DEFAULT_CAPACITY;\n \n        if (minCapacity > minExpand) {\n            ensureExplicitCapacity(minCapacity);\n        }\n    }\n \n    private void ensureCapacityInternal(int minCapacity) {\n        if (elementData == EMPTY_ELEMENTDATA) {\n            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n        }\n \n        ensureExplicitCapacity(minCapacity);\n    }\n \n    private void ensureExplicitCapacity(int minCapacity) {\n        modCount++;\n \n        // overflow-conscious code\n        if (minCapacity - elementData.length > 0)\n            grow(minCapacity);\n    }\n\n    /**\n     * 扩充容量，确保它至少扩充到原来的1.5倍。\n     * Increases the capacity to ensure that it can hold at least the\n     * number of elements specified by the minimum capacity argument.\n     *\n     * @param minCapacity the desired minimum capacity\n     */\n    private void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        int newCapacity = oldCapacity + (oldCapacity >> 1);\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:\n        elementData = Arrays.copyOf(elementData, newCapacity);\n    }\n \n    private static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n            Integer.MAX_VALUE :\n            MAX_ARRAY_SIZE;\n    }\n```\n\n方法size、isEmpty都是根据size判断，花费O(1)时间，indexOf方法中，首先判断要搜索的元素是否为空，若为空则遍历数组是否存在空值，有则返回对应的下表，否则返回-1；若元素不为空，同样是遍历数组，使用equal方法判断数组中是否有相等的元素。lastIndexOf方法与indexOf类似，只不过遍历方式是从后向前。contains方法通过判断indexOf方法查找该元素。\n```java\n    /**\n     * Returns the number of elements in this list.\n     *\n     * @return the number of elements in this list\n     */\n    public int size() {\n        return size;\n    }\n \n    /**\n     * Returns <tt>true</tt> if this list contains no elements.\n     *\n     * @return <tt>true</tt> if this list contains no elements\n     */\n    public boolean isEmpty() {\n        return size == 0;\n    }\n \n    /**\n     * Returns <tt>true</tt> if this list contains the specified element.\n     * More formally, returns <tt>true</tt> if and only if this list contains\n     * at least one element <tt>e</tt> such that\n     * <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n     *\n     * @param o element whose presence in this list is to be tested\n     * @return <tt>true</tt> if this list contains the specified element\n     */\n    public boolean contains(Object o) {\n        return indexOf(o) >= 0;\n    }\n    /**\n     * Returns the index of the first occurrence of the specified element\n     * in this list, or -1 if this list does not contain the element.\n     * More formally, returns the lowest index <tt>i</tt> such that\n     * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,\n     * or -1 if there is no such index.\n     */\n    public int indexOf(Object o) {\n        if (o == null) {\n            for (int i = 0; i < size; i++)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = 0; i < size; i++)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n    /**\n     * Returns the index of the last occurrence of the specified element\n     * in this list, or -1 if this list does not contain the element.\n     * More formally, returns the highest index <tt>i</tt> such that\n     * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,\n     * or -1 if there is no such index.\n     */\n    public int lastIndexOf(Object o) {\n        if (o == null) {\n            for (int i = size-1; i >= 0; i--)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = size-1; i >= 0; i--)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n```\n\nclone方法首先调用父类的clone方法返回一个对象的副本，将所返回的对象的elementData数组赋值为原对象elementData的内容，将副本的modCount设置为0.\n该方法返回ArrayList实例的浅副本，即不复制这些元素本身。\n```java\n    /**\n     * Returns a shallow copy of this <tt>ArrayList</tt> instance.  (The\n     * elements themselves are not copied.)\n     *\n     * @return a clone of this <tt>ArrayList</tt> instance\n     */\n    public Object clone() {\n        try {\n            @SuppressWarnings(\"unchecked\")\n                ArrayList<E> v = (ArrayList<E>) super.clone();\n            v.elementData = Arrays.copyOf(elementData, size);\n            v.modCount = 0;\n            return v;\n        } catch (CloneNotSupportedException e) {\n            // this shouldn't happen, since we are Cloneable\n            throw new InternalError();\n        }\n    }\n```\ntoArray方法返回elementData数组的副本，而不是返回elementData本身。\n```java\n    /**\n     * Returns an array containing all of the elements in this list\n     * in proper sequence (from first to last element).\n     *\n     * <p>The returned array will be \"safe\" in that no references to it are\n     * maintained by this list.  (In other words, this method must allocate\n     * a new array).  The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all of the elements in this list in\n     *         proper sequence\n     */\n    public Object[] toArray() {\n        return Arrays.copyOf(elementData, size);\n    }\n \n    @SuppressWarnings(\"unchecked\")\n    public <T> T[] toArray(T[] a) {\n        if (a.length < size)\n            // Make a new array of a's runtime type, but my contents:\n            return (T[]) Arrays.copyOf(elementData, size, a.getClass());\n        System.arraycopy(elementData, 0, a, 0, size);\n        if (a.length > size)\n            a[size] = null;\n        return a;\n    }\n```\nadd和remove特定下标的元素，add的话，注意要先扩充数组容量，若，remove的话最后记得将要删除的位置设置为null，让GC回收垃圾，两个方法都是通过方法system.arraycopy移动数组位置。\n添加和删除元素方法不是同步的，因此如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了数组，那么该数组必须保持外部同步，在网上查到，可以通过Collections.synchronizedList方法将该数组包装起来。\n```java\n    /**\n     * Inserts the specified element at the specified position in this\n     * list. Shifts the element currently at that position (if any) and\n     * any subsequent elements to the right (adds one to their indices).\n     *\n     * @param index index at which the specified element is to be inserted\n     * @param element element to be inserted\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     */\n    public void add(int index, E element) {\n        rangeCheckForAdd(index);\n \n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        System.arraycopy(elementData, index, elementData, index + 1,\n                         size - index);\n        elementData[index] = element;\n        size++;\n    }\n\n    /**\n     * Removes the element at the specified position in this list.\n     * Shifts any subsequent elements to the left (subtracts one from their\n     * indices).\n     *\n     * @param index the index of the element to be removed\n     * @return the element that was removed from the list\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     */\n    public E remove(int index) {\n        rangeCheck(index);\n \n        modCount++;\n        E oldValue = elementData(index);\n \n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                             numMoved);\n        elementData[--size] = null; // clear to let GC do its work\n \n        return oldValue;\n    }\n```\n\nclear方法并没有修改elementData的长度，只是将其内容设置null，让GC回收空间，并设size为0.\n```java\n    /**\n     * Removes all of the elements from this list.  The list will\n     * be empty after this call returns.\n     */\n    public void clear() {\n        modCount++;\n \n        // clear to let GC do its work\n        for (int i = 0; i < size; i++)\n            elementData[i] = null;\n \n        size = 0;\n    }\n```\n\nremoveAll和retainAll方法，removeAll是删除数组中包含指定集合的元素，retainAll是只保留在指定集合中的元素，数组的其他元素将删除。\n```java\n    /**\n     * Removes from this list all of its elements that are contained in the\n     * specified collection.\n     *\n     * @param c collection containing elements to be removed from this list\n     * @return {@code true} if this list changed as a result of the call\n     * @throws ClassCastException if the class of an element of this list\n     *         is incompatible with the specified collection\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this list contains a null element and the\n     *         specified collection does not permit null elements\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see Collection#contains(Object)\n     */\n    public boolean removeAll(Collection<?> c) {\n        return batchRemove(c, false);\n    }\n \n    /**\n     * Retains only the elements in this list that are contained in the\n     * specified collection.  In other words, removes from this list all\n     * of its elements that are not contained in the specified collection.\n     *\n     * @param c collection containing elements to be retained in this list\n     * @return {@code true} if this list changed as a result of the call\n     * @throws ClassCastException if the class of an element of this list\n     *         is incompatible with the specified collection\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this list contains a null element and the\n     *         specified collection does not permit null elements\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see Collection#contains(Object)\n     */\n    public boolean retainAll(Collection<?> c) {\n        return batchRemove(c, true);\n    }\n \n    private boolean batchRemove(Collection<?> c, boolean complement) {\n        final Object[] elementData = this.elementData;\n        int r = 0, w = 0;\n        boolean modified = false;\n        try {\n            for (; r < size; r++)\n                if (c.contains(elementData[r]) == complement)\n                    elementData[w++] = elementData[r];\n        } finally {\n            // Preserve behavioral compatibility with AbstractCollection,\n            // even if c.contains() throws.\n            if (r != size) {\n                System.arraycopy(elementData, r,\n                                 elementData, w,\n                                 size - r);\n                w += size - r;\n            }\n            if (w != size) {\n                // clear to let GC do its work\n                for (int i = w; i < size; i++)\n                    elementData[i] = null;\n                modCount += size - w;\n                size = w;\n                modified = true;\n            }\n        }\n        return modified;\n    }\n```\nsize、isEmpty、get、set、iterator和listIterator操作需要O（1）时间，add、remove等操作大都以线性时间运行。\n参考：\nhttp://my.oschina.net/u/268957/blog/499587\nhttp://www.codeweblog.com/%E6%B7%B1%E5%85%A5jdk%E6%BA%90%E7%A0%81%E4%B9%8Barraylist%E7%B1%BB/\nhttp://blog.csdn.net/jzhf2012/article/details/8540410\n","source":"_posts/List之ArrayList源码分析.md","raw":"title: List之ArrayList源码分析\ndate: 2016-03-16 16:40:13\ntags:\n- java api\n---\nArrayList内部使用一个Object[]数组来保存元素。**源码版本为JDK1.7.0_75**.\n```java\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable,java.io.Serializable\n```\n从ArrayList<E>可以看出它是支持泛型的，它继承了AbstractList，该类提供了List接口的默认实现；List接口定义了list必须实现的方法；RandomAccess是一个标记接口，接口内没有定义任何内容；实现了Cloneable接口的类，可以调用Object.clone方法返回该对象的浅拷贝；实现java.io.Serializable接口可以启用序列化功能，这个也是一个标记接口，接口内也没有定义任何内容，仅用于标识可序列化的语义。\n\n**成员变量**\n```java\n    private static final long serialVersionUID = 8683452581122892189L;\n \n    /**\n     * 默认初始长度\n     * Default initial capacity.\n     */\n    private static final int DEFAULT_CAPACITY = 10;\n \n    /**\n     * 共享的空数组，用于无参构造实例\n     * Shared empty array instance used for empty instances.\n     */\n    private static final Object[] EMPTY_ELEMENTDATA = {};\n \n    /**\n     * 存储arraylist元素的buffer。arraylist的容量为该数组的长度。当arraylist为空且\n     *   elementData==EMPTY_ELEMENTDATA时，添加第一个元素时，arraylist的长度会扩展到\n     *   DEFAULT_CAPACITY。\n     * The array buffer into which the elements of the ArrayList are stored.\n     * The capacity of the ArrayList is the length of this array buffer. Any\n     * empty ArrayList with elementData == EMPTY_ELEMENTDATA will be expanded to\n     * DEFAULT_CAPACITY when the first element is added.\n     */\n    private transient Object[] elementData;\n \n    /**\n     * arraylist的长度（包含的元素数目）\n     * The size of the ArrayList (the number of elements it contains).\n     *\n     * @serial\n     */\n    private int size;\n```\nelementData数组存储ArrayList中的元素，size为数组长度。\n其中，transient关键字用来表示一个域不是该对象串行化（序列化）的一部分。当一个对象被串行化（序列化）时，transient型变量不包括在串行化（序列化）表示中。通俗地讲，如果用transient修饰一个变量，当对象被存储时，该变量的值不需要维持，不需要为给变量分配内存。\n1. transient的作用及使用方法\n      我们都知道一个对象只要实现了Serilizable接口，这个对象就可以被序列化，java的这种序列化模式为开发者提供了很多便利，我们可以不必关系具体序列化的过程，只要这个类实现了Serilizable接口，这个类的所有属性和方法都会自动序列化。\n      然而在实际开发过程中，我们常常会遇到这样的问题，这个类的有些属性需要序列化，而其他属性不需要被序列化，打个比方，如果一个用户有一些敏感信息（如密码，银行卡号等），为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。\n      总之，java 的transient关键字为我们提供了便利，你只需要实现Serilizable接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。\n\n来自 <http://www.cnblogs.com/lanxuezaipiao/p/3369962.html> \n\n**构造函数**\n```java\n    /**\n     * 构造给定数组大小的空数组\n     * Constructs an empty list with the specified initial capacity.\n     *\n     * @param  initialCapacity  the initial capacity of the list\n     * @throws IllegalArgumentException if the specified initial capacity\n     *         is negative\n     */\n    public ArrayList(int initialCapacity) {\n        super();\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                               initialCapacity);\n        this.elementData = new Object[initialCapacity];\n    }\n \n    /**\n     * 构造未指定数组大小的空数组，此时elementData=EMPTY_ELEMENTDATA\n     * Constructs an empty list with an initial capacity of ten.\n     */\n    public ArrayList() {\n        super();\n        this.elementData = EMPTY_ELEMENTDATA;\n    }\n \n    /**\n     * 构造指定数组大小及元素的数组\n     * Constructs a list containing the elements of the specified\n     * collection, in the order they are returned by the collection's\n     * iterator.\n     *\n     * @param c the collection whose elements are to be placed into this list\n     * @throws NullPointerException if the specified collection is null\n     */\n    public ArrayList(Collection<? extends E> c) {\n        elementData = c.toArray();\n        size = elementData.length;\n        // c.toArray might (incorrectly) not return Object[] (see 6260652)\n        if (elementData.getClass() != Object[].class)\n            elementData = Arrays.copyOf(elementData, size, Object[].class);\n    }\n```\n**方法：**\ntrimToSize中的modCount为父类AbstractList的成员，“The number of times this list has been <i>structurally modified</i>”记录list结构修改次数。\n```java\n    /**\n     * 将arraylist的容量修剪到数组的长度。应用该方法可以减少arraylist实例的内存。\n     * Trims the capacity of this <tt>ArrayList</tt> instance to be the\n     * list's current size.  An application can use this operation to minimize\n     * the storage of an <tt>ArrayList</tt> instance.\n     */\n    public void trimToSize() {\n        modCount++;\n        if (size < elementData.length) {\n            elementData = Arrays.copyOf(elementData, size);\n        }\n    }\n```\n\n扩充arraylist的容量，至少扩充到原来的1.5倍\n```java\n    /**\n     * 扩充arraylist的容量\n     * Increases the capacity of this <tt>ArrayList</tt> instance, if\n     * necessary, to ensure that it can hold at least the number of elements\n     * specified by the minimum capacity argument.\n     *\n     * @param   minCapacity   the desired minimum capacity\n     */\n    public void ensureCapacity(int minCapacity) {\n        int minExpand = (elementData != EMPTY_ELEMENTDATA)\n            // any size if real element table\n            ? 0\n            // larger than default for empty table. It's already supposed to be\n            // at default size.\n            : DEFAULT_CAPACITY;\n \n        if (minCapacity > minExpand) {\n            ensureExplicitCapacity(minCapacity);\n        }\n    }\n \n    private void ensureCapacityInternal(int minCapacity) {\n        if (elementData == EMPTY_ELEMENTDATA) {\n            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n        }\n \n        ensureExplicitCapacity(minCapacity);\n    }\n \n    private void ensureExplicitCapacity(int minCapacity) {\n        modCount++;\n \n        // overflow-conscious code\n        if (minCapacity - elementData.length > 0)\n            grow(minCapacity);\n    }\n\n    /**\n     * 扩充容量，确保它至少扩充到原来的1.5倍。\n     * Increases the capacity to ensure that it can hold at least the\n     * number of elements specified by the minimum capacity argument.\n     *\n     * @param minCapacity the desired minimum capacity\n     */\n    private void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        int newCapacity = oldCapacity + (oldCapacity >> 1);\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:\n        elementData = Arrays.copyOf(elementData, newCapacity);\n    }\n \n    private static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n            Integer.MAX_VALUE :\n            MAX_ARRAY_SIZE;\n    }\n```\n\n方法size、isEmpty都是根据size判断，花费O(1)时间，indexOf方法中，首先判断要搜索的元素是否为空，若为空则遍历数组是否存在空值，有则返回对应的下表，否则返回-1；若元素不为空，同样是遍历数组，使用equal方法判断数组中是否有相等的元素。lastIndexOf方法与indexOf类似，只不过遍历方式是从后向前。contains方法通过判断indexOf方法查找该元素。\n```java\n    /**\n     * Returns the number of elements in this list.\n     *\n     * @return the number of elements in this list\n     */\n    public int size() {\n        return size;\n    }\n \n    /**\n     * Returns <tt>true</tt> if this list contains no elements.\n     *\n     * @return <tt>true</tt> if this list contains no elements\n     */\n    public boolean isEmpty() {\n        return size == 0;\n    }\n \n    /**\n     * Returns <tt>true</tt> if this list contains the specified element.\n     * More formally, returns <tt>true</tt> if and only if this list contains\n     * at least one element <tt>e</tt> such that\n     * <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n     *\n     * @param o element whose presence in this list is to be tested\n     * @return <tt>true</tt> if this list contains the specified element\n     */\n    public boolean contains(Object o) {\n        return indexOf(o) >= 0;\n    }\n    /**\n     * Returns the index of the first occurrence of the specified element\n     * in this list, or -1 if this list does not contain the element.\n     * More formally, returns the lowest index <tt>i</tt> such that\n     * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,\n     * or -1 if there is no such index.\n     */\n    public int indexOf(Object o) {\n        if (o == null) {\n            for (int i = 0; i < size; i++)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = 0; i < size; i++)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n    /**\n     * Returns the index of the last occurrence of the specified element\n     * in this list, or -1 if this list does not contain the element.\n     * More formally, returns the highest index <tt>i</tt> such that\n     * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,\n     * or -1 if there is no such index.\n     */\n    public int lastIndexOf(Object o) {\n        if (o == null) {\n            for (int i = size-1; i >= 0; i--)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = size-1; i >= 0; i--)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n```\n\nclone方法首先调用父类的clone方法返回一个对象的副本，将所返回的对象的elementData数组赋值为原对象elementData的内容，将副本的modCount设置为0.\n该方法返回ArrayList实例的浅副本，即不复制这些元素本身。\n```java\n    /**\n     * Returns a shallow copy of this <tt>ArrayList</tt> instance.  (The\n     * elements themselves are not copied.)\n     *\n     * @return a clone of this <tt>ArrayList</tt> instance\n     */\n    public Object clone() {\n        try {\n            @SuppressWarnings(\"unchecked\")\n                ArrayList<E> v = (ArrayList<E>) super.clone();\n            v.elementData = Arrays.copyOf(elementData, size);\n            v.modCount = 0;\n            return v;\n        } catch (CloneNotSupportedException e) {\n            // this shouldn't happen, since we are Cloneable\n            throw new InternalError();\n        }\n    }\n```\ntoArray方法返回elementData数组的副本，而不是返回elementData本身。\n```java\n    /**\n     * Returns an array containing all of the elements in this list\n     * in proper sequence (from first to last element).\n     *\n     * <p>The returned array will be \"safe\" in that no references to it are\n     * maintained by this list.  (In other words, this method must allocate\n     * a new array).  The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all of the elements in this list in\n     *         proper sequence\n     */\n    public Object[] toArray() {\n        return Arrays.copyOf(elementData, size);\n    }\n \n    @SuppressWarnings(\"unchecked\")\n    public <T> T[] toArray(T[] a) {\n        if (a.length < size)\n            // Make a new array of a's runtime type, but my contents:\n            return (T[]) Arrays.copyOf(elementData, size, a.getClass());\n        System.arraycopy(elementData, 0, a, 0, size);\n        if (a.length > size)\n            a[size] = null;\n        return a;\n    }\n```\nadd和remove特定下标的元素，add的话，注意要先扩充数组容量，若，remove的话最后记得将要删除的位置设置为null，让GC回收垃圾，两个方法都是通过方法system.arraycopy移动数组位置。\n添加和删除元素方法不是同步的，因此如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了数组，那么该数组必须保持外部同步，在网上查到，可以通过Collections.synchronizedList方法将该数组包装起来。\n```java\n    /**\n     * Inserts the specified element at the specified position in this\n     * list. Shifts the element currently at that position (if any) and\n     * any subsequent elements to the right (adds one to their indices).\n     *\n     * @param index index at which the specified element is to be inserted\n     * @param element element to be inserted\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     */\n    public void add(int index, E element) {\n        rangeCheckForAdd(index);\n \n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        System.arraycopy(elementData, index, elementData, index + 1,\n                         size - index);\n        elementData[index] = element;\n        size++;\n    }\n\n    /**\n     * Removes the element at the specified position in this list.\n     * Shifts any subsequent elements to the left (subtracts one from their\n     * indices).\n     *\n     * @param index the index of the element to be removed\n     * @return the element that was removed from the list\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     */\n    public E remove(int index) {\n        rangeCheck(index);\n \n        modCount++;\n        E oldValue = elementData(index);\n \n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                             numMoved);\n        elementData[--size] = null; // clear to let GC do its work\n \n        return oldValue;\n    }\n```\n\nclear方法并没有修改elementData的长度，只是将其内容设置null，让GC回收空间，并设size为0.\n```java\n    /**\n     * Removes all of the elements from this list.  The list will\n     * be empty after this call returns.\n     */\n    public void clear() {\n        modCount++;\n \n        // clear to let GC do its work\n        for (int i = 0; i < size; i++)\n            elementData[i] = null;\n \n        size = 0;\n    }\n```\n\nremoveAll和retainAll方法，removeAll是删除数组中包含指定集合的元素，retainAll是只保留在指定集合中的元素，数组的其他元素将删除。\n```java\n    /**\n     * Removes from this list all of its elements that are contained in the\n     * specified collection.\n     *\n     * @param c collection containing elements to be removed from this list\n     * @return {@code true} if this list changed as a result of the call\n     * @throws ClassCastException if the class of an element of this list\n     *         is incompatible with the specified collection\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this list contains a null element and the\n     *         specified collection does not permit null elements\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see Collection#contains(Object)\n     */\n    public boolean removeAll(Collection<?> c) {\n        return batchRemove(c, false);\n    }\n \n    /**\n     * Retains only the elements in this list that are contained in the\n     * specified collection.  In other words, removes from this list all\n     * of its elements that are not contained in the specified collection.\n     *\n     * @param c collection containing elements to be retained in this list\n     * @return {@code true} if this list changed as a result of the call\n     * @throws ClassCastException if the class of an element of this list\n     *         is incompatible with the specified collection\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this list contains a null element and the\n     *         specified collection does not permit null elements\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see Collection#contains(Object)\n     */\n    public boolean retainAll(Collection<?> c) {\n        return batchRemove(c, true);\n    }\n \n    private boolean batchRemove(Collection<?> c, boolean complement) {\n        final Object[] elementData = this.elementData;\n        int r = 0, w = 0;\n        boolean modified = false;\n        try {\n            for (; r < size; r++)\n                if (c.contains(elementData[r]) == complement)\n                    elementData[w++] = elementData[r];\n        } finally {\n            // Preserve behavioral compatibility with AbstractCollection,\n            // even if c.contains() throws.\n            if (r != size) {\n                System.arraycopy(elementData, r,\n                                 elementData, w,\n                                 size - r);\n                w += size - r;\n            }\n            if (w != size) {\n                // clear to let GC do its work\n                for (int i = w; i < size; i++)\n                    elementData[i] = null;\n                modCount += size - w;\n                size = w;\n                modified = true;\n            }\n        }\n        return modified;\n    }\n```\nsize、isEmpty、get、set、iterator和listIterator操作需要O（1）时间，add、remove等操作大都以线性时间运行。\n参考：\nhttp://my.oschina.net/u/268957/blog/499587\nhttp://www.codeweblog.com/%E6%B7%B1%E5%85%A5jdk%E6%BA%90%E7%A0%81%E4%B9%8Barraylist%E7%B1%BB/\nhttp://blog.csdn.net/jzhf2012/article/details/8540410\n","slug":"List之ArrayList源码分析","published":1,"updated":"2016-03-16T10:41:12.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilykuya60008i4fqewxyz1ky"},{"title":"89. Gray Code","date":"2016-03-16T08:28:47.000Z","_content":"The gray code is a binary numeral system where two successive values differ in only one bit.\n\nGiven a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.\n\nFor example, given n = 2, return [0,1,3,2]. Its gray code sequence is:\n\n00 - 0\n01 - 1\n11 - 3\n10 - 2\nNote:\nFor a given n, a gray code sequence is not uniquely defined.\n\nFor example, [0,2,3,1] is also a valid gray code sequence according to the above definition.\n\nFor now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.\n\n解题思路：\n当n=3时，假设前4个元素使用n=2的gray code，即[000,001,011,010]，那么剩下的数字都是1xx，只要将前4个元素逆序，再加上4即可，即[110,111,101,100]。。。构造方法就是这样的过程。。\n```java\nclass Solution {\npublic:\n    vector<int> grayCode(int n) {\n        vector<int>res;\n        res.push_back(0);\n        if(n==0)return res;\n        res.push_back(1);\n        if(n==1)return res;\n        int tmp=2;\n        int num=(1<<n);\n        while(tmp!=num){\n            for(int i=tmp-1;i>=0;i--)res.push_back(res[i]+tmp);\n            tmp<<=1;\n        }\n        return res;\n    }\n};\n```\n","source":"_posts/98-Gary-Code.md","raw":"title: 89. Gray Code\ndate: 2016-03-16 16:28:47\ntags:\n- leetcode\n---\nThe gray code is a binary numeral system where two successive values differ in only one bit.\n\nGiven a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.\n\nFor example, given n = 2, return [0,1,3,2]. Its gray code sequence is:\n\n00 - 0\n01 - 1\n11 - 3\n10 - 2\nNote:\nFor a given n, a gray code sequence is not uniquely defined.\n\nFor example, [0,2,3,1] is also a valid gray code sequence according to the above definition.\n\nFor now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.\n\n解题思路：\n当n=3时，假设前4个元素使用n=2的gray code，即[000,001,011,010]，那么剩下的数字都是1xx，只要将前4个元素逆序，再加上4即可，即[110,111,101,100]。。。构造方法就是这样的过程。。\n```java\nclass Solution {\npublic:\n    vector<int> grayCode(int n) {\n        vector<int>res;\n        res.push_back(0);\n        if(n==0)return res;\n        res.push_back(1);\n        if(n==1)return res;\n        int tmp=2;\n        int num=(1<<n);\n        while(tmp!=num){\n            for(int i=tmp-1;i>=0;i--)res.push_back(res[i]+tmp);\n            tmp<<=1;\n        }\n        return res;\n    }\n};\n```\n","slug":"98-Gary-Code","published":1,"updated":"2016-03-16T10:41:12.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilykuyaa000bi4fqj6xpfa4z"},{"title":"62. Unique Paths","date":"2016-03-16T08:00:18.000Z","_content":"\nA robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n\nHow many possible unique paths are there?\n\n\nAbove is a 3 x 7 grid. How many possible unique paths are there?\n\nNote: m and n will be at most 100.     \n\n### 解题思路：\n水题。。。。求c(n+m-2,min(n,m)-1)。注意乘法可能导致int溢出，将其先转换为long即可\n\n```java\nclass Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        int res=1;\n        if(n==1||m==1)return 1;\n        int tmp=m>n?n-1:m-1;\n       for(int i=m+n-2,j=1;j<=tmp;i--,j++)\n       res=(int)((long)res*(long)i/j);\n       return res;\n    }\n};\n```\n\n","source":"_posts/62. Unique Paths.md","raw":"title: 62. Unique Paths\ndate: 2016-03-16 16:00:18\ntags:\n    - leetcode\n---\n\nA robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n\nHow many possible unique paths are there?\n\n\nAbove is a 3 x 7 grid. How many possible unique paths are there?\n\nNote: m and n will be at most 100.     \n\n### 解题思路：\n水题。。。。求c(n+m-2,min(n,m)-1)。注意乘法可能导致int溢出，将其先转换为long即可\n\n```java\nclass Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        int res=1;\n        if(n==1||m==1)return 1;\n        int tmp=m>n?n-1:m-1;\n       for(int i=m+n-2,j=1;j<=tmp;i--,j++)\n       res=(int)((long)res*(long)i/j);\n       return res;\n    }\n};\n```\n\n","slug":"62. Unique Paths","published":1,"updated":"2016-03-16T10:41:12.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilykuyag000di4fqb9h2ucdt"},{"title":"46. Permutations","date":"2016-03-16T11:49:40.000Z","_content":"Given a collection of distinct numbers, return all possible permutations.\n\nFor example,\n[1,2,3] have the following permutations:\n[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].\n\n## 结题报告\nDFS。。。\n\n```java\nclass Solution {\npublic:\n\t// 12 ms vector<int>tmp(n,0); save times \n\t// it costs 16ms if not knowing the size of tmp and using  push_back(),erase \n    vector<vector<int>> permute(vector<int>& nums) {\n        int n=nums.size();\n        vector<vector<int>>res;\n        if(n==0)return res;\n        int*flag=new int[n];\n        for(int i=0;i<n;i++)flag[i]=0;\n        vector<int>tmp(n,0);\n        dfs(res,nums,flag,tmp,0);\n        return res;\n        \n    }\n    void dfs(vector<vector<int>>&res,vector<int>&nums,int *flag,vector<int>&tmp,int j){\n        int n=nums.size();\n        if(j==n){\n            res.push_back(tmp);\n            return ;\n        }\n        for(int i=0;i<n;i++){\n            if(!flag[i]){\n                tmp[j]=nums[i];\n                flag[i]=1;\n                dfs(res,nums,flag,tmp,j+1);\n                flag[i]=0;\n            }\n        }\n    }\n};\n```\n","source":"_posts/46-Permutations.md","raw":"title: 46. Permutations\ndate: 2016-03-16 19:49:40\ntags:\n- leetcode\n---\nGiven a collection of distinct numbers, return all possible permutations.\n\nFor example,\n[1,2,3] have the following permutations:\n[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].\n\n## 结题报告\nDFS。。。\n\n```java\nclass Solution {\npublic:\n\t// 12 ms vector<int>tmp(n,0); save times \n\t// it costs 16ms if not knowing the size of tmp and using  push_back(),erase \n    vector<vector<int>> permute(vector<int>& nums) {\n        int n=nums.size();\n        vector<vector<int>>res;\n        if(n==0)return res;\n        int*flag=new int[n];\n        for(int i=0;i<n;i++)flag[i]=0;\n        vector<int>tmp(n,0);\n        dfs(res,nums,flag,tmp,0);\n        return res;\n        \n    }\n    void dfs(vector<vector<int>>&res,vector<int>&nums,int *flag,vector<int>&tmp,int j){\n        int n=nums.size();\n        if(j==n){\n            res.push_back(tmp);\n            return ;\n        }\n        for(int i=0;i<n;i++){\n            if(!flag[i]){\n                tmp[j]=nums[i];\n                flag[i]=1;\n                dfs(res,nums,flag,tmp,j+1);\n                flag[i]=0;\n            }\n        }\n    }\n};\n```\n","slug":"46-Permutations","published":1,"updated":"2016-03-16T11:50:01.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilykuyak000fi4fqnbuq4ml4"},{"title":"153. Find Minimum in Rotated Sorted Array","date":"2016-03-16T08:31:47.000Z","_content":"Suppose a sorted array is rotated at some pivot unknown to you beforehand.\n\n(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).\n\nFind the minimum element.\n\nYou may assume no duplicate exists in the array.\n\n结题思路：\n方法一：遍历数组，判断是否存在nums[i-1]>nums[i]的情况，若有则返回nums[i]，否则返回nums[0]。\n```java\nclass Solution {\npublic:\n    // 6ms\n    int findMin(vector<int>& nums) {\n        int n=nums.size();\n        if(n==1)return nums[0];\n        for(int i=1;i<n;i++){\n            if(nums[i-1]>nums[i])return nums[i];\n        }\n        return nums[0];\n    }\n};\n```\n方法二：类二分法\n将数组的中值与最右元素比较，若中间值大于最右元素，则说明右部分的数组存在递增递减的情况，即最小值在该区域内；若中间值小于最右元素，则最小区域在左部分。\n```java\nclass Solution {\npublic:\n    // 4ms\n    int findMin(vector<int>& nums) {\n        int n=nums.size();\n        if(n==1)return nums[0];\n        int l=0,r=n-1;\n        while(l<r){\n            int mid=(l+r)>>1;\n            if(nums[mid]>nums[r])l=mid+1;\n            else\n            r=mid;\n        }\n        return nums[l];\n    }\n};\n```\n\n","source":"_posts/153-Find-Minimum-in-Rotated-Sorted-Array.md","raw":"title: 153. Find Minimum in Rotated Sorted Array\ndate: 2016-03-16 16:31:47\ntags:\n- leetcode\n---\nSuppose a sorted array is rotated at some pivot unknown to you beforehand.\n\n(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).\n\nFind the minimum element.\n\nYou may assume no duplicate exists in the array.\n\n结题思路：\n方法一：遍历数组，判断是否存在nums[i-1]>nums[i]的情况，若有则返回nums[i]，否则返回nums[0]。\n```java\nclass Solution {\npublic:\n    // 6ms\n    int findMin(vector<int>& nums) {\n        int n=nums.size();\n        if(n==1)return nums[0];\n        for(int i=1;i<n;i++){\n            if(nums[i-1]>nums[i])return nums[i];\n        }\n        return nums[0];\n    }\n};\n```\n方法二：类二分法\n将数组的中值与最右元素比较，若中间值大于最右元素，则说明右部分的数组存在递增递减的情况，即最小值在该区域内；若中间值小于最右元素，则最小区域在左部分。\n```java\nclass Solution {\npublic:\n    // 4ms\n    int findMin(vector<int>& nums) {\n        int n=nums.size();\n        if(n==1)return nums[0];\n        int l=0,r=n-1;\n        while(l<r){\n            int mid=(l+r)>>1;\n            if(nums[mid]>nums[r])l=mid+1;\n            else\n            r=mid;\n        }\n        return nums[l];\n    }\n};\n```\n\n","slug":"153-Find-Minimum-in-Rotated-Sorted-Array","published":1,"updated":"2016-03-16T10:41:12.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilykuyan000hi4fqdulzp87i"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cilykuy9f0000i4fq92gntci4","tag_id":"cilykuy9q0001i4fq517g40zz","_id":"cilykuy9t0002i4fq6sltxugq"},{"post_id":"cilykuy9w0003i4fqblkslv78","tag_id":"cilykuya20004i4fqmoe4s2b2","_id":"cilykuya40006i4fqzfwhhamu"},{"post_id":"cilykuy9w0003i4fqblkslv78","tag_id":"cilykuya30005i4fqkmiczrsn","_id":"cilykuya40007i4fqap0138ec"},{"post_id":"cilykuya60008i4fqewxyz1ky","tag_id":"cilykuya80009i4fq4xn9mud3","_id":"cilykuya9000ai4fqqgtbjbwc"},{"post_id":"cilykuyaa000bi4fqj6xpfa4z","tag_id":"cilykuy9q0001i4fq517g40zz","_id":"cilykuyae000ci4fqliouicis"},{"post_id":"cilykuyag000di4fqb9h2ucdt","tag_id":"cilykuy9q0001i4fq517g40zz","_id":"cilykuyai000ei4fq7t64twln"},{"post_id":"cilykuyak000fi4fqnbuq4ml4","tag_id":"cilykuy9q0001i4fq517g40zz","_id":"cilykuyam000gi4fqha6tqf5b"},{"post_id":"cilykuyan000hi4fqdulzp87i","tag_id":"cilykuy9q0001i4fq517g40zz","_id":"cilykuyar000ii4fq2xxfpp8r"}],"Tag":[{"name":"leetcode","_id":"cilykuy9q0001i4fq517g40zz"},{"name":"主题","_id":"cilykuya20004i4fqmoe4s2b2"},{"name":"hexo","_id":"cilykuya30005i4fqkmiczrsn"},{"name":"java api","_id":"cilykuya80009i4fq4xn9mud3"}]}}